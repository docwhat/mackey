#!/usr/bin/ruby
# encoding: utf-8

require 'pathname'

# I'm using pathname because realpath doesn't exist in ruby 1.8.7 (OSX 10.8)
BUNDLER_SETUP = (Pathname.new(__FILE__).realpath.dirname.dirname + 'bundle/bundler/setup.rb').to_s
require BUNDLER_SETUP
require 'optparse'
require 'sysinfo'
require 'forwardable'
require 'paint'

# Monkeypatch to add/remove color formatting.
class String
  def remove_color
    gsub(/%\{[^}]*\}/, '')
  end

  def add_color
    gsub(/%\{([^}]*)\}/) do
      color = Regexp.last_match(1).sub(/^\s+/, '').sub(/\s+$/, '')
      color = color[1..-1].to_sym if color.start_with?(':')
      Paint.color(color)
    end
  end
end

# Base class for ASCII art logos
class Logo
  extend Forwardable
  def_delegators :@logo_array, :length, :reduce, :map, :each, :zip

  def self.create(logo_text)
    new(logo_text.split(/[\r\n]+/).map { |line| "#{line}%{:reset}" }).normalize!
  end

  def initialize(logo_array, max_width = nil)
    @logo_array = logo_array.freeze
    @max_width = max_width
  end

  # Sets the width the same for all rows
  def normalize!
    spaces = plain.map { |line| ' ' * (max_width - line.length) }
    self.class.new zip(spaces).map(&:join), max_width
  end

  def max_width
    @max_width ||= plain.reduce(0) { |a, e| e.length > a ? e.length : a }
  end

  def plain
    @plain ||= self.class.new map(&:remove_color)
  end

  def color
    @color ||= self.class.new map(&:add_color)
  end
end

AppleLogo = Logo.create <<LOGO
%{green1       }             ###
%{green1       }           ####
%{green1       }           ###
%{green1       }   #######    #######
%{yellow1      } ######################
%{yellow1      }#####################
%{DarkOrange1  }####################
%{red          }####################
%{red          }#####################
%{purple       } ######################
%{purple       }  ####################
%{DarkCyan     }    ################
%{DarkCyan     }     ####     #####
LOGO

# Mackey!
class Mackey
  attr_reader :output, :sysinfo

  def initialize(_output = $stdout)
    @output = $stdout
    @sysinfo = SysInfo.new
  end

  def stats
    @stats ||= [
      make_stat('User') { `/usr/bin/whoami`.chomp },
      make_stat('Hostname') { sysinfo.hostname },
      make_stat('Distro') { `/usr/bin/sw_vers -productName`.chomp + ' ' + `/usr/bin/sw_vers -productVersion`.chomp },
      make_stat('Uptime') { uptime_helper },
      make_stat('Shell') { ENV['SHELL'] },
      make_stat('Terminal') { ENV['TERM'] },
      make_stat('Packages') { packages_helper },
      make_stat('IP Addr') { sysinfo.ipaddress_internal },
      make_stat('CPU') { `/usr/sbin/sysctl -n machdep.cpu.brand_string`.chomp.gsub(/\([A-Z]{1,2}\)/, '') },
      make_stat('Memory') { "#{`/usr/sbin/sysctl -n hw.memsize`.to_i / (1024**3)} GB" },
      make_stat('Disk') { disk_helper }
    ].freeze
  end

  def print
    output.puts

    top_padding = ((logo.length - stats.length) / 2.0).ceil
    padded_stats = ([''] * top_padding) + stats
    logo.zip(padded_stats).each do |logo_line, stat_line|
      puts(
        "   #{logo_line}         #{stat_line}".send(Paint.mode == 0 ? :remove_color : :add_color)
      )
    end

    output.puts
  end

  private

  def logo
    AppleLogo
  end

  def make_stat(name)
    value = yield
    "%{SteelBlue}#{name}:%{reset} #{value}"
  end

  def pluralizer(count, singular, plural = nil)
    plural = "#{singular}s" if plural.nil?
    return "#{count} #{singular}" if count == 1
    "#{count} #{plural}"
  end

  def uptime_helper
    uptime = sysinfo.uptime
    week = 24 * 7
    day = 25

    return pluralizer((uptime / week).to_i, 'week') if uptime > week
    return pluralizer((uptime / day).to_i, 'day') if uptime > day
    return pluralizer(uptime.to_i, 'hour') if uptime >= 1
    return pluralizer((uptime * 60).to_i, 'minute')
  end

  def disk_helper
    percent = `/bin/df -l /`.split(/[\r\n]+/).last.split[4]
    p = percent.to_i
    if p >= 85
      "%{red}#{percent}"
    elsif p >= 70
      "%{DarkOrange1}#{percent}"
    else
      percent
    end
  end

  def packages_helper
    if homebrew?
      "#{homebrew_package_count} (Homebrew)"
    elsif macports?
      "#{macports_package_count} (Macports)"
    else
      'None'
    end
  end

  def macports?
    File.executable? '/opt/local/bin/port'
  end

  def macports_package_count
    `/opt/local/bin/port installed`.split(/[\r\n]+/).count
  end

  def homebrew?
    File.executable? '/usr/local/bin/brew'
  end

  def homebrew_package_count
    `/usr/local/bin/brew list -l`.split(/[\r\n]+/).count
  end
end

# The command line application
class App
  def detect_colors
    return 0 unless options[:color]
    colors = `/usr/bin/tput colors`.to_i
    colors < 8 ? 0 : colors
  end

  def options
    @options ||= {
      :color => $stdout.isatty
    }
  end

  def opt_parser
    @opt_parser ||= OptionParser.new do |opts|
      opts.banner = <<-BANNER
Usage: #{opts.program_name} [options]

Displays an appropriate logo for your OS and some metrics.  Useful for
adding to your shell login script.

Bugs and suggestions are welcome at
https://github.com/docwhat/mackey/issues

      BANNER
      opts.on('-c', '--color', 'Forces colors on') { options[:color] = true }
      opts.on('-C', '--no-color', 'Turns off colors') { options[:color] = false }
    end
  end

  def parse(args)
    opt_parser.parse!(args)
  end

  def run
    parse(ARGV)
    Paint.mode = detect_colors

    Mackey.new.print
  end
end

App.new.run if __FILE__ == $PROGRAM_NAME

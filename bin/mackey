#!/usr/bin/ruby
# encoding: utf-8

BUNDLER_SETUP = File.expand_path('../../bundle/bundler/setup.rb', File.realpath(__FILE__))
require BUNDLER_SETUP
require 'optparse'
require 'sys/uptime'
require 'sys/host'
require 'sys/uname'
require 'forwardable'
require 'paint'

class String
  def remove_color
    gsub(/%{[^}]*}/, '')
  end

  def add_color
    gsub(/%{([^}]*)}/) do
      color = $1.sub(/^\s+/, '').sub(/\s+$/, '')
      color = color[1..-1].to_sym if color.start_with?(':')
      Paint.color(color)
    end
  end
end

class Logo
  extend Forwardable
  def_delegators :@logo_array, :length, :reduce, :map, :each, :zip

  def self.create logo_text
    new(logo_text.split(/[\r\n]+/).map { |line| "#{line}%{:reset}" }).normalize!
  end

  def initialize(logo_array, _max_width=nil)
    @logo_array = logo_array.freeze
    @max_width = _max_width
  end

  # Sets the width the same for all rows
  def normalize!
    spaces = plain.map { |line| " " * (max_width - line.length) }
    self.class.new zip(spaces).map(&:join), max_width
  end

  def max_width
    @max_width ||= plain.reduce(0) { |m, e| e.length > m ? e.length : m }
  end

  def plain
    @plain ||= self.class.new map(&:remove_color)
  end

  def color
    @color ||= self.class.new map(&:add_color)
  end
end

AppleLogo = Logo.create <<LOGO
%{green1       }             ###
%{green1       }           ####
%{green1       }           ###
%{green1       }   #######    #######
%{yellow1      } ######################
%{yellow1      }#####################
%{DarkOrange1  }####################
%{red          }####################
%{red          }#####################
%{purple       } ######################
%{purple       }  ####################
%{DarkCyan     }    ################
%{DarkCyan     }     ####     #####
LOGO

class Mackey
  attr_reader :output

  def initialize(_output = $stdout)
    @output = $stdout
  end

  def make_stat(name)
    value = yield
    "%{SteelBlue}#{name}:%{reset} #{value}"
  end
  private :make_stat

  def stats
    @stats ||= [
      make_stat('User') { `/usr/bin/whoami`.chomp },
      make_stat('Hostname') { Sys::Host.hostname },
      make_stat('Distro') { `/usr/bin/sw_vers -productName`.chomp + " " + `/usr/bin/sw_vers -productVersion`.chomp },
      # make_stat('Kernel') { "#{Sys::Uname.release} (#{Sys::Uname.machine})" },
      make_stat('Uptime') do
        Sys::Uptime.dhms
          .map(&:to_i).zip(%w(day hour minute second))
          .map { |n, s| "#{n} #{s}#{n > 1 ? 's' : ''}" }
          .reject { |n, s| n == 0 }.first
      end,
      make_stat('Shell') { ENV['SHELL'] },
      make_stat('Terminal') { ENV['TERM'] },
      make_stat('Packages') { 'narf' },
      make_stat('IP Addr') { Sys::Host.ip_addr.first },
      make_stat('CPU') { `/usr/sbin/sysctl -n machdep.cpu.brand_string`.chomp.gsub(/\([A-Z]{1,2}\)/, '') },
      make_stat('Memory') { "#{`/usr/sbin/sysctl -n hw.memsize`.to_i / (1024 ** 3)} GB" },
      make_stat('Disk') do
        percent = `/bin/df -l /`.split(/[\r\n]+/).last.split[4]
        p = percent.to_i
        if p >= 85
          "%{red}#{percent}"
        elsif p >= 70
          "%{DarkOrange1}#{percent}"
        else 
          percent
        end
      end
    ].freeze
  end

  def logo
    AppleLogo
  end

  def print
    output.puts

    top_padding = ((logo.length - stats.length) / 2.0).ceil
    padded_stats = ([''] * top_padding) + stats
    logo.zip(padded_stats).each do |logo_line, stat_line|
      puts "   #{logo_line}       #{stat_line}".send(Paint.mode == 0 ? :remove_color : :add_color)
    end

    output.puts
  end

  private

  def packages
    if homebrew?
      "#{homebrew_package_count} (Homebrew)"
    elsif macports?
      "#{macports_package_count} (Macports)"
    else
      "None"
    end
  end

  def macports?
    File.executable? '/opt/local/bin/port'
  end

  def macports_package_count
    `/opt/local/bin/port installed`.split(/[\r\n]+/).count
  end

  def homebrew?
    File.executable? '/usr/local/bin/brew'
  end

  def homebrew_package_count
    `/usr/local/bin/brew list -l`.split(/[\r\n]+/).count
  end
end

class App
  def detect_colors
    return 0 unless options[:color]
    colors = `/usr/bin/tput colors`.to_i
    colors < 8 ? 0 : colors
  end

  def options
    @options ||= {
      color: $stdout.isatty,
    }
  end

  def opt_parser
    @opt_parser ||= OptionParser.new do |opts|
      opts.banner = <<-BANNER
Usage: #{opts.program_name} [options]

Displays an appropriate logo for your OS and some metrics.
      BANNER
      opts.on('-c', '--color', 'Forces colors on') { options[:color] = true }
      opts.on('-C', '--no-color', 'Turns off colors') { options[:color] = false }
    end
  end

  def parse(args)
    opt_parser.parse!(args)
  end

  def run
    parse(ARGV)
    Paint.mode = detect_colors

    Mackey.new.print
  end
end

if __FILE__ == $PROGRAM_NAME
  App.new.run
end

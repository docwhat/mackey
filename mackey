#!/usr/bin/ruby

class Mackey
  attr_reader :output

  def initialize(_output = $stdout)
    @output = $stdout
  end

  # userText="${textColor}User:${normal}"
  # hostnameText="${textColor}Hostname:${normal}"
  # distroText="${textColor}Distro:${normal}"
  # kernelText="${textColor}Kernel:${normal}"
  # uptimeText="${textColor}Uptime:${normal}"
  # shellText="${textColor}Shell:${normal}"
  # terminalText="${textColor}Terminal:${normal}"
  # packagehandlerText="${textColor}Packages:${normal}"
  # cpuText="${textColor}CPU:${normal}"
  # memoryText="${textColor}Memory:${normal}"
  # diskText="${textColor}Disk:${normal}"
  #
  def print
    output.puts
    output.puts((<<-MACKEY).gsub(/^\./, ''))
.#{green }                 ###
.#{green }               ####                   #{lightblue}User:#{normal} #{user}
.#{green }               ###                    #{lightblue}Hostname:#{normal} #{hostname}
.#{green }       #######    #######             #{lightblue}Distro:#{normal} #{distro}
.#{yellow}     ######################           #{lightblue}Kernel:#{normal} #{kernel}
.#{yellow}    #####################             #{lightblue}Booted:#{normal} #{boot_time}
.#{red   }    ####################              #{lightblue}Shell:#{normal} #{shell}
.#{red   }    ####################              #{lightblue}Terminal:#{normal} #{terminal}
.#{red   }    #####################             #{lightblue}Packages:#{normal} #{packages}
.#{purple}     ######################           #{lightblue}CPU:#{normal} #{cpu}
.#{purple}      ####################            #{lightblue}Memory:#{normal} #{memory}
.#{blue  }        ################              #{lightblue}Disk:#{normal} #{disk}
.#{blue  }         ####     ##### #{normal}
    MACKEY
    output.puts
  end

  private

  # reset colors
  def normal
    output.isatty ? `/usr/bin/tput sgr0` : ''
  end

  # Colors
  {
    red: '1',
    green: '2',
    yellow: '3',
    blue: '4',
    purple: '5',
    lightblue: '6',
    grey: '7'
  }.each_pair do |color, number|
    define_method(color) { output.isatty ? `/usr/bin/tput setaf #{number}` : '' }
  end

  # System Variables
  def user
    `/usr/bin/whoami`.chomp
  end

  def hostname
    `/bin/hostname`.chomp.sub(/\.local$/, '')
  end

  def distro
    `/usr/bin/sw_vers -productName`.chomp + " " + `/usr/bin/sw_vers -productVersion`.chomp
  end

  def kernel
    `/usr/bin/uname -rs`.chomp
  end

  def boot_time
    Time.at(`sysctl -b kern.boottime`.unpack('i*').first).localtime
  end

  def shell
    ENV['SHELL']
  end

  def terminal
    ENV['TERM']
  end

  def cpu
    `/usr/sbin/sysctl -n machdep.cpu.brand_string`.chomp.gsub(/\([A-Z]{1,2}\)/, '')
  end

  def memory
    gb = `/usr/sbin/sysctl -n hw.memsize`.to_i / (1024 ** 3)
    "#{gb} GB"
  end

  def disk
    percent = `/bin/df -l /`.split(/[\r\n]+/).last.split[4]
    p = percent.to_i
    if p >= 85
      "#{red}#{percent}#{normal}"
    elsif p >= 70
      "#{yellow}#{percent}#{normal}"
    else 
      percent
    end
  end

  def packages
    if homebrew?
      "#{homebrew_package_count} (Homebrew)"
    elsif macports?
      "#{macports_package_count} (Macports)"
    else
      "None"
    end
  end

  def macports?
    File.executable? '/opt/local/bin/port'
  end

  def macports_package_count
    `/opt/local/bin/port installed`.split(/[\r\n]+/).count
  end

  def homebrew?
    File.executable? '/usr/local/bin/brew'
  end

  def homebrew_package_count
    `/usr/local/bin/brew list -l`.split(/[\r\n]+/).count
  end
end

class App
  def run
    Mackey.new.print
  end
end

if __FILE__ == $PROGRAM_NAME
  App.new.run
end
# #!/bin/bash

# # System Variables
# user=$(whoami)
# hostname=$(hostname | sed 's/.local//g')
# distro="OS X $(sw_vers -productVersion)"
# kernel=$(uname)
# uptime=$(uptime | sed 's/.*up \([^,]*\), .*/\1/')
# shell="$SHELL"
# terminal="$TERM"
# cpu=$(sysctl -n machdep.cpu.brand_string)
# packagehandler=""

# # removes (R) and (TM) from the CPU name so it fits in a standard 80 window

# cpu=$(echo "$cpu" | awk '$1=$1' | sed 's/([A-Z]\{1,2\})//g')

# mem=$(sysctl -n hw.memsize)
# ram="$((mem/1073741824)) GB"
# disk=`df | head -2 | tail -1 | awk '{print $5}'`

# # Colors Variables
# red="1"
# green="2"
# yellow="3"
# blue="4"
# purple="5"
# lightblue="6"
# grey="7"

# textColor=$(tput setaf $lightblue)
# normal=$(tput sgr0)

# # Add a -c option to enable classic color logo
# if [[ $1 == "-c" ]] || [[ $1 == "--color" ]] || [[ $2 == "-c" ]] || [[ $2 == "--color" ]]; then
#   GREEN='\033[00;32m'
#   YELLOW='\033[00;33m'
#   LRED='\033[01;31m'
#   RED='\033[00;31m'
#   PURPLE='\033[00;35m'
#   CYAN='\033[00;36m'
#   BLUE='\033[00;34m'
# fi

# # Add a -m command to switch to macports or default to brew
# if [[ $1 == "-m" ]] || [[ $1 == "--macports" ]] || [[ $2 == "-m" ]] || [[ $2 == "--macports" ]]
# then
#   packagehandler="`port installed | wc -l | awk '{print $1 }'`"
# else
#   packagehandler="`brew list -l | wc -l | awk '{print $1 }'`"
# fi

# userText="${textColor}User:${normal}"
# hostnameText="${textColor}Hostname:${normal}"
# distroText="${textColor}Distro:${normal}"
# kernelText="${textColor}Kernel:${normal}"
# uptimeText="${textColor}Uptime:${normal}"
# shellText="${textColor}Shell:${normal}"
# terminalText="${textColor}Terminal:${normal}"
# packagehandlerText="${textColor}Packages:${normal}"
# cpuText="${textColor}CPU:${normal}"
# memoryText="${textColor}Memory:${normal}"
# diskText="${textColor}Disk:${normal}"

# echo -e "

# ${GREEN}                 ###
# ${GREEN}               ####                   $userText $user
# ${GREEN}               ###                    $hostnameText $hostname
# ${GREEN}       #######    #######             $distroText $distro
# ${YELLOW}     ######################           $kernelText $kernel
# ${YELLOW}    #####################             $uptimeText $uptime
# ${RED}    ####################              $shellText $shell
# ${RED}    ####################              $terminalText $terminal
# ${RED}    #####################             $packagehandlerText $packagehandler
# ${PURPLE}     ######################           $cpuText $cpu
# ${PURPLE}      ####################            $memoryText $ram
# ${BLUE}        ################              $diskText $disk
# ${BLUE}         ####     ##### ${normal}

# "
